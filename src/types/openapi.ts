/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file. 
 */

export interface paths {
    "/register": {
        parameters: {
        };
        /** Register a new user */
        post: operations["registerUser"];
    };
    "/login": {
        parameters: {
        };
        /** Login a user */
        post: operations["loginUser"];
    };
    "/user": {
        parameters: {
        };
        /** Get user details */
        get: operations["userGet"];
        /** Update user details */
        patch: operations["userPatch"];
    };
    "/book-review": {
        parameters: {
        };
        /** Get all reviews */
        get: operations["bookReviewGet"];
        /** Book a review */
        post: operations["bookReviewPost"];
    };
    "/book-review/{reviewId}": {
        parameters: {
        };
        /** Delete a review */
        delete: operations["bookReviewDelete"];
        /** Update a review */
        patch: operations["bookReviewPatch"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Format: date-time */
        Timestamp: string;
        /** @description ID of the user */
        UserId: string;
        /** @description Name of the user */
        UserName: string;
        /** @description Rating of the shop or user */
        Rating: number;
        /** @description Review count */
        Review: number;
        LoginWithCreds: {
            /** @description Email of the user */
            email: string;
            /** @description Password of the user */
            password: string;
        };
        BookReview: {
            /** @description ID of the review */
            id?: string;
            reviewer?: {
                id: components["schemas"]["UserId"];
                username: components["schemas"]["UserName"];
                /** @description Email of the user */
                email: string;
            };
            rating: components["schemas"]["Rating"];
            /** @description Comment for the rating */
            reviewText?: string;
            createdAt?: components["schemas"]["Timestamp"];
            /** @description Title of the book */
            bookTitle?: string;
            /** @description Author of the book */
            bookAuthor?: string;
        };
        BookReviewPatch: {
            rating?: components["schemas"]["Rating"];
            /** @description Comment for the rating */
            reviewText?: string;
            /** @description Title of the book */
            bookTitle?: string;
            /** @description Author of the book */
            bookAuthor?: string;
        };
        BookReviewPost: {
            rating: components["schemas"]["Rating"];
            /** @description Comment for the rating */
            reviewText?: string;
            /** @description Title of the book */
            bookTitle: string;
            /** @description Author of the book */
            bookAuthor: string;
        };
        LoginWithRefreshtoken: {
            /** @description Refresh token of the user */
            refreshToken: string;
        };
        RatingPatch: {
            rating?: components["schemas"]["Rating"];
            /** @description Comment for the rating */
            comment?: string;
        };
        UserRegister: {
            username: components["schemas"]["UserName"];
            /** @description Email of the user */
            email: string;
            /** @description Password of the user */
            password: string;
        };
        LoginResponse: {
            /** @description JWT token for the user */
            accessToken: string;
            /** @description Refresh token for the user */
            refreshToken?: string;
        };
        User: {
            id: components["schemas"]["UserId"];
            username: components["schemas"]["UserName"];
            /** @description Email of the user */
            email: string;
            createdAt: components["schemas"]["Timestamp"];
            /** @description URL of the user's profile image */
            avatar?: string;
        };
        UserPatch: {
            username?: components["schemas"]["UserName"];
            /** @description Email of the user */
            email?: string;
            /** @description URL of the user's profile image */
            avatar?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaTimestamp = components['schemas']['Timestamp'];
export type SchemaUserId = components['schemas']['UserId'];
export type SchemaUserName = components['schemas']['UserName'];
export type SchemaRating = components['schemas']['Rating'];
export type SchemaReview = components['schemas']['Review'];
export type SchemaLoginWithCreds = components['schemas']['LoginWithCreds'];
export type SchemaBookReview = components['schemas']['BookReview'];
export type SchemaBookReviewPatch = components['schemas']['BookReviewPatch'];
export type SchemaBookReviewPost = components['schemas']['BookReviewPost'];
export type SchemaLoginWithRefreshtoken = components['schemas']['LoginWithRefreshtoken'];
export type SchemaRatingPatch = components['schemas']['RatingPatch'];
export type SchemaUserRegister = components['schemas']['UserRegister'];
export type SchemaLoginResponse = components['schemas']['LoginResponse'];
export type SchemaUser = components['schemas']['User'];
export type SchemaUserPatch = components['schemas']['UserPatch'];
export type $defs = Record<string, never>;
export interface operations {
    registerUser: {
        parameters: {
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRegister"];
            };
        };
        responses: {
            /** @description User registered successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description User registered successfully */
                        success?: boolean;
                    };
                };
            };
        };
    };
    loginUser: {
        parameters: {
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginWithCreds"];
            };
        };
        responses: {
            /** @description User logged in successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
        };
    };
    userGet: {
        parameters: {
        };
        responses: {
            /** @description User details fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    userPatch: {
        parameters: {
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPatch"];
            };
        };
        responses: {
            /** @description User details updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description User details updated successfully */
                        success?: boolean;
                    };
                };
            };
        };
    };
    bookReviewGet: {
        parameters: {
            query?: {
                /** @description Fetch the reviews of a specific user */
                id?: string;
                /** @description Page number */
                page?: number;
                /** @description Number of reviews per page */
                limit?: number;
            };
        };
        responses: {
            /** @description Reviews fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Total number of reviews */
                        total?: number;
                        /** @description Current page number */
                        currentPage?: number;
                        reviews?: components["schemas"]["BookReview"][];
                    };
                };
            };
        };
    };
    bookReviewPost: {
        parameters: {
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookReviewPost"];
            };
        };
        responses: {
            /** @description Review booked successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        review?: components["schemas"]["BookReview"];
                    };
                };
            };
        };
    };
    bookReviewDelete: {
        parameters: {
            path: {
                /** @description ID of the review */
                reviewId: string;
            };
        };
        responses: {
            /** @description Review deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Review deleted successfully */
                        success?: boolean;
                    };
                };
            };
        };
    };
    bookReviewPatch: {
        parameters: {
            path: {
                /** @description ID of the review */
                reviewId: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookReviewPatch"];
            };
        };
        responses: {
            /** @description Review updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Review updated successfully */
                        success?: boolean;
                    };
                };
            };
        };
    };
}